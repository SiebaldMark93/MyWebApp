Breakdown:  How to SpringBoot CRUD

Programs
-SpringBoot Web
-Spring JPA and Hibernate
-MySQL Database
-Thymeleaf
-HTML5
-CSS/Bootstrap
-JUnit 5
-AssertJ

Steps
1.  Create & Setup Spring Boot Project
2.  Code Home Page
3.  Code User Entity Class & UserRepository Interface
4.  Code UserRepositoryTests(Unit test for data access layer)
5.  Code Users Listing Page
6.  Code Add User function
7.  Code Retrieve User function
8.  Code Edit User function
9.  Code Delete User function

How to steps/breakdown:

CREATE/SETUP SB, ETC
1.  Creat & Setup Spring Boot Project (Use CodeUp Curriculum for reference)
    ~Declare dependencies for:
    -Spring Web
    -Spring Data JPA
    -Thymeleaf
    -MySQL JDBC Driver
    -Spring Boot DevTools(for automatic reload changes) OPTIONAL
    -Webjars for Bootstrap

2.  Create new database schema-Under Database tab--> Data Source--> MySQL
    -Under Name input "userdb@localhost
    -User: root
    -Password:
    -Click Test Connection
        -Download driver files if they are not downloaded
-Under userdb@localhost--> right click-->New -->Schema
    -Name: usersdb
    -Collation:utf8mb4_general_ci
-click and checkbox usersdb schema


3.  Configure Datasource in application.properties
    Input the following:
    -spring.datasource.url=jdbc:mysql://localhost:3306/usersdb
    -spring.datasource.username=root
    -spring.datasource.password=
    -spring.jpa.hibernate.ddl-auto=update
    -spring.jpa.properties.hibernate.show_sql=true
    -server.port=8081

-----------------------------------------------------------------------------------------------------------
CODE HOME PAGE
1.  Code MainController class
    -Under com.mycompany folder-->Create new java class--> Name: MainController
    -Add annotation @Controller (this is the spring jdbc controller)
    -Add @GetMapping inside public class MainController
        *(This handles the request for the whole application of the context part of the application)

2.  Code index.html (Home web page)
    -Under resources folder-->templates folder-->Create new html named: index

3.  Run the application
    -Go to MyWebApplication.java and click the green start button
    -To tell if it's running properly, under run tab (bottom of intellij).  You will be able to see these two lines(and no errors occur)
        -LiveReload server is running on port 35729
        -Tomcat started on port(s): 8081 (http) with context path ''
    -View index html on web browser with url: localhost:8081

4.  Configure IDE to use DevTools(automatic reload changes) OPTIONAL
    -press shift key 2x-->look up registry
    -locate compiler.automake.allow.whe.app.running-->check box
    -open settings-->Under Build, Execution, Deployment-->Compiler
    -check Build project automatically-->OK
    -Configure run settings-->right click green play button in the MyWebApplication.java-->Click modify run Configuration
    -Under update action-->click Update classes and resources
    -Under on frame deactivation-->click Update classes and resources-->OK
    -Restart application

5.  Update index.html
    -add anchor hyperlink encased inside an h2 element
    -encase both h1 and h2 elements in a div container
    -within div tag add styling--> align= "center"-->view the update in web browser

Using Bootstrap
    -Open the pom file
    -Declare additional dependencies in order to utilize Bootstrap
    -update index.html-->add link element in the head container for stylesheet
    -Declare Thymeleaf expression in the <html> tag using--> xmlns:th=""http://www.theymleaf.org"
    -Go back into <link tag and type--> type="text/class" th:href="@{/webjars/bootstrap/css/bootstrap.min.css}" />
        * This code will select the url correctly in the project *
    -Update the <div> tag--> "class="container-fluid text-center""
    -Update <a> tag--> class="h2" th:href="@{/users}"
     * This will generate the correct url *

     -STOP and REFRESH Spring to see changes

----------------------------------------------------------------------------

Code Data Access Layer for User module
1.  Code user entity class that maps to the user table in the database
    -Create new package in com.mycompany folder titled: user
    -Create new Java class in User folder titled: User
    -Add @Entity annotation because this is an entity class
    -Add @Table annotation to specify that the mapping table is users.
    -Declare fields in the entity class User (private annotations)
    -Add @Id to indicate that this field maps to the primary column in the table
    -Add @GeneratedValue with the paramater strategy type = generation type.IDENTITY
        -This means the values of the id column will be generated automatically by the database.
    -Add @Column to the email field to specify some additional properties such as "nullable = false" meaning that the value of email is required and "unique = true" meaning that the email is unique in the table users, add length of 45 characters
    -Add @Column to the password field with length 15 characters maximum, nullable = false
    -Add @Column to first name and last name field for length = 45, nullable = false, add name = "first name"; add name = "last name" - these are mapping column name.
    -Generate getters and setters


2.  Code user repository interface to use APIs of Spring Data JPA to let hibernate framework create the table.  Create CRUDRepository
    -Create new repository for the USER repository
    -Under user folder--> New--> Java Class --> click Interface --> Name: UserRepository
    -extends CrudRepository, using spring, with title of the entity of User and the type of id field of Integer. Because in the java class we used Integer in the Id field
-----------------------------------------------------------------

Code Unit Tests for Data Access Layer

1. Use Spring Data JPA Test
    -Under Test folder--> Delete MyWebApplicationTests
    -Create a new Test class under Java--> Create java class--> Name:UserRepositoryTest
    --In order to use Spring data JPA test use annotation-->@DataJpaTest for the test class
    --In order to run test against the real database use annotation-->@AutoConfigureTestDatabase
    --with parameter replace = AutoConfigureTestDatabase.Replace.NONE
        -This means that the test will be executed against the real database instead of the default in memory database.
    --Use annotation @Rollback(false), to keep that data committed to the database
    --Use @Autowired to reference to the user repository interface
    -@Test method to test the first method (Add)- for adding a new User to the data base
    -input code to add email, password, first name and last name.
    -code repo.save method to proceed this user object into the database.
    -Assign User savedUser to = repo.save(user).
    -code Assertions.assertThat(savedUser).isNotNull().
    -code Assertions.asserThat(savedUser.getId()).isGreaterThan(0).
    --This allows us to run the test method ofr posting a new user object into the database.
    --RUN the test


2. Test CRUD operations on users (CREATE, RETRIEVE, UPDATE and DELETE).




